#!/bin/bash -e
#
#  Update Amulet test definitions
#
#  This script is likely only relevant for the tasks necessary at a
#  point in time.  Committed to repo for reference anyway, to be
#  improved upon or adjusted for later needs.

charms="$(cat charms.txt)"
src_charms="$(cat source-charms.txt)"
basedir="$(pwd)"
branch="$1"

gerrit_topic="update-amulet-defs"
commit_msg_file="$basedir/commit-message-amulet-defs-1708.txt"

all_params="$@"
if [[ "$all_params" == *--amend* ]]; then
  AMEND="True"
fi
if [[ "$all_params" == *--no-review* ]]; then
  NO_REVIEW="True"
fi
if [[ "$all_params" == *--force-review* ]]; then
  FORCE_REVIEW="True"
fi
if [[ "$all_params" == *--rebase-master* ]]; then
  REBASE_MASTER="True"
fi
if [[ "$all_params" == *--ch-sync-legacy* ]]; then
  CH_SYNC="True"
fi

usage="usage: update-amulet-defs <master||stable/nn.nn>

USAGE EXAMPLES

Clone repos, check out the master branch, make changes and
submit gerrit reviews:
  ./update-amulet-defs master

Clone repos, check out the master branch, performa a legacy
charm-helper sync, make changes and submit gerrit reviews:
  ./update-amulet-defs master --ch-sync-legacy

Clone repos, check out the master branch, make changes
but do not actually submit a gerrit review:
  ./update-amulet-defs master --no-review

Re-use local checkout, amend commits and add patchset to
the existing gerrit review:
  ./update-amulet-defs master --amend

Re-use local checkout, rebase with master, amend commits
and add patchset to the existing gerrit review:
  ./update-amulet-defs master --amend --rebase-master

Re-use local checkout, rebase with master, amend commits
and add patchset to the existing gerrit review even if
no changes detected in the repo.  Useful if manually
committing changes in the local repo outside this script.
  ./update-amulet-defs master --amend --rebase-master --force-review

Re-use local checkout, amend commits for adding to the review,
but do not actually submit a gerrit review:
  ./update-amulet-defs master --amend --no-review
"

if [ -z "$branch" ]; then
    echo -e "$usage"
    exit 1
fi

# Expect user to have git config ready for gerrit use
git config --get gitreview.username || ( echo " ! Not set: gitreview.username git config option"; echo -e "$usage"; exit 1 )

commit_msg="$(cat $commit_msg_file ||:)"
if [ -z "$commit_msg" ]; then
    echo " ! $commit_msg_file not found or empty."
    exit 1
fi


function git_get(){
  (
  if [[ "${AMEND^^}" != "TRUE" ]] && [[ ! -d $2 ]]; then
    echo " + Clone $1 -> $2"
    git clone $1 $2
    cd $2
    git checkout $3
  elif [[ "${AMEND^^}" != "TRUE" ]] && [[ -d $2 ]]; then
    echo " ! Dir exists: $2.  Consider running 'make clean' or using --amend."
    exit 1
  else
    echo " . Re-using checkout dir $2"
    cd $2
    git branch -v
  fi
  )
}


function git_review(){
  if [ "${NO_REVIEW^^}" == "TRUE" ]; then
    echo " . Not proposing gerrit (dry run)."
  elif [ "${FORCE_REVIEW^^}" != "TRUE" ]; then
    echo " . Submitting gerrit review for $charm"
    git review
  elif [ "${FORCE_REVIEW^^}" == "TRUE" ]; then
    echo " . Submitting gerrit review for $charm (non-fatal on failure)"
    git review ||:
  else
    echo " ! Unknown condition in git_review"
    exit 1
  fi
}


for charm in $charms; do
  echo "===== $charm ====="
  (
    git_get https://github.com/openstack/charm-$charm $charm $branch
    cd $charm

    # Set file locations depending on charm type
    charm_dir="$basedir/$charm"
    if grep "^$charm$" ../source-charms.txt; then
      # src charms
      echo " . source charm"
      tests_dir="$basedir/$charm/src/tests"
      x_o_dev_file="$basedir/$charm/src/tests/dev-basic-xenial-ocata"
      x_o_dest_file="$basedir/$charm/src/tests/gate-basic-xenial-ocata"

      z_o_dev_file="$basedir/$charm/src/tests/dev-basic-zesty-ocata"
      z_o_dest_file="$basedir/$charm/src/tests/gate-basic-zesty-ocata"

      t_m_src_file="$basedir/$charm/src/tests/gate-basic-trusty-mitaka"
      x_m_src_file="$basedir/$charm/src/tests/gate-basic-xenial-mitaka"
      p_i_del_file="$basedir/$charm/src/tests/*precise*"
      y_n_del_file="$basedir/$charm/src/tests/*yakkety*"
    else
      # classic charms
      echo " . classic charm"
      tests_dir="$basedir/$charm/tests"
      x_o_dev_file="$basedir/$charm/tests/dev-basic-xenial-ocata"
      x_o_dest_file="$basedir/$charm/tests/gate-basic-xenial-ocata"

      z_o_dev_file="$basedir/$charm/tests/dev-basic-zesty-ocata"
      z_o_dest_file="$basedir/$charm/tests/gate-basic-zesty-ocata"

      t_m_src_file="$basedir/$charm/tests/gate-basic-trusty-mitaka"
      x_m_src_file="$basedir/$charm/tests/gate-basic-xenial-mitaka"
      p_i_del_file="$basedir/$charm/tests/*precise*"
      y_n_del_file="$basedir/$charm/tests/*yakkety*"
    fi

    # Move Xenial Newton Dev test definitions to gate test definitions
    if [[ -f $x_o_dev_file ]]; then
      git mv -fv $x_o_dev_file $x_o_dest_file
      echo " . Moved OK: $x_o_dest_file"
    elif [[ ! -f $x_o_dev_file ]] && [[ -f $x_o_dest_file ]]; then
      echo " . Already OK: $x_o_dest_file"
    elif [[ ! -f $x_o_dev_file ]] && [[ ! -f $x_o_dest_file ]] && [[ -f $t_m_src_file ]]; then
      echo " Copy 1"
      cp $t_m_src_file $x_o_dest_file
      sed -e "s_mitaka_ocata_g" -i $x_o_dest_file
      sed -e "s_Mitaka_Ocata_g" -i $x_o_dest_file
      sed -e "s_trusty_xenial_g" -i $x_o_dest_file
      sed -e "s_Trusty_Xenial_g" -i $x_o_dest_file
      echo " + Generated $x_o_dest_file based on $t_m_src_file"
    elif [[ ! -f $x_o_dev_file ]] && [[ ! -f $x_o_dest_file ]] && [[ ! -f $t_m_src_file ]]; then
      echo " !!! Manual edits required"
      echo $x_o_dev_file
      echo $x_o_dest_file
      echo $t_m_src_file
    fi

    # Move Yakkety Newton Dev test definitions to gate test definitions
    if [[ -f $z_o_dev_file ]]; then
      git mv -fv $z_o_dev_file $z_o_dest_file
      echo " . Moved OK: $z_o_dest_file"
    elif [[ ! -f $z_o_dev_file ]] && [[ -f $z_o_dest_file ]]; then
      echo " . Already OK: $z_o_dest_file"
    elif [[ ! -f $z_o_dev_file ]] && [[ ! -f $z_o_dest_file ]] && [[ -f $x_m_src_file ]]; then
      echo " Copy 2"
      cp $x_m_src_file $z_o_dest_file
      sed -e "s_mitaka_ocata_g" -i $z_o_dest_file
      sed -e "s_Mitaka_ocata_g" -i $z_o_dest_file
      sed -e "s_xenial_zesty_g" -i $z_o_dest_file
      sed -e "s_Xenial_Zesty_g" -i $z_o_dest_file
      echo " + Generated $z_o_dest_file based on $x_m_src_file"
    elif [[ ! -f $z_o_dev_file ]] && [[ ! -f $z_o_dest_file ]] && [[ ! -f $x_m_src_file ]]; then
      echo " !!! Manual edits required"
      echo $z_o_dev_file
      echo $z_o_dest_file
      echo $x_m_src_file
    fi

    # Enable and disable edges
    chmod -v +x ${tests_dir}/*newton* ||:
    chmod -v +x ${tests_dir}/*ocata* ||:
    chmod -v -x ${tests_dir}/*pike* ||:

    # Fix hashbangs
    find ${tests_dir} -maxdepth 1 -type f | xargs sed -e "s_#\!/usr/bin/python\$_#\!/usr/bin/env python_g" -i
    find ${tests_dir} -maxdepth 1 -type f | xargs sed -e "s_#\!/usr/bin/python3\$_#\!/usr/bin/env python3_g" -i

    # Remove Precise test definitions
    if [[ -n "$(ls $p_i_del_file)" ]]; then
      git rm -f $p_i_del_file
      echo " . Removed OK: $p_i_del_file"
    fi

    # Remove Yakkety test definitions
    if [[ -n "$(ls $y_n_del_file)" ]]; then
      git rm -f $y_n_del_file
      echo " . Removed OK: $y_n_del_file"
    fi

    # Update series metadata
    metadata=$(find $charm_dir -name "metadata.yaml")
    echo " . metadata file: $metadata"

    if grep " - precise" $metadata; then
      sed -i "/ - precise/d" $metadata
    fi
    if grep " - yakkety" $metadata; then
      sed -i "/ - yakkety/d" $metadata
    fi
    if ! grep " - zesty" $metadata; then
      sed -e "s_  - xenial_  - xenial\n  - zesty_g" $metadata -i
    fi

    # Optionally rebase with master
    if [[ "${REBASE_MASTER^^}" == "TRUE" ]]; then
      (
        git checkout master
        git pull
        git checkout $gerrit_topic || git checkout -b $gerrit_topic
        git rebase master
      )
    fi

    # Optionally do legacy-style charm-helper sync
    if [[ "${CH_SYNC^^}" == "TRUE" ]] && [[ -f 'Makefile' ]]; then
      echo " + Doing legacy-style charm-helper sync on $charm"
      make sync
    else
      echo " . No legacy-style charm-helper sync available for $charm"
    fi

    # Commit if there are changes, or optionally commit even if no changes
    git_status="$(git status -s)"
    if [[ "${FORCE_REVIEW^^}" == "TRUE" ]]; then
      git_status="True"
    fi
    if [[ "${AMEND^^}" != "TRUE" ]] && [[ -n "$git_status" ]]; then
      git checkout -b $gerrit_topic
      git add .
      git commit -F $commit_msg_file
      git_review
    elif [[ "${AMEND^^}" == "TRUE" ]] && [[ -n "$git_status" ]]; then
      git checkout $gerrit_topic || git checkout -b $gerrit_topic
      git add .
      git commit --amend --no-edit
      git_review
    else
      echo " - No changes for $charm, skipping git review."
    fi
  )
done
